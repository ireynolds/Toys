// Implements a inner join operator on a relational DBMS. Defaults to page nested 
// loop join, but uses hash equijoin when possible. Does not consider indices or 
// hash joins on involving tables that do not fit in memory.

package simpledb;

import java.util.*;

import simpledb.Predicate.Op;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private DbIterator _lChild;
    private DbIterator _rChild;
    private final JoinPredicate _predicate;
    private TupleDesc _resultSchema;
    private JoinImplementation helper;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        _lChild = child1;
        _rChild = child2;
        _predicate = p;
        _resultSchema = TupleDesc.merge(_lChild.getTupleDesc(), _rChild.getTupleDesc());
        
        if (_predicate.getOperator() == Op.EQUALS) {
            helper = new HashJoin();
        } else {
            helper = new NestedLoopJoin();
        }
    }

    public JoinPredicate getJoinPredicate() {
        return _predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return _resultSchema.getFieldName(_predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        int rIndex = _lChild.getTupleDesc().numFields() + _predicate.getField2();
        return _resultSchema.getFieldName(rIndex);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return _resultSchema;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        _lChild.open();
        _rChild.open();
        helper.open();
        super.open();
    }

    public void close() {
        _lChild.close();
        _rChild.close();
        helper.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        _lChild.rewind();
        _rChild.rewind();
        helper.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        throwIfClosed();
        return helper.fetchNext();
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] { _lChild, _rChild };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (children.length < 2) {
            throw new IllegalArgumentException("The argument children must " +
                    "be of length at least 2.");
        }
        
        close();
        
        _lChild = children[0];
        _rChild = children[1];
    }
    
    private Tuple join(Tuple left, Tuple right) {
        Tuple result = new Tuple(_resultSchema);
        
        int i = 0;
        for (Field f : left) {
            result.setField(i, f);
            i++;
        }
        
        for (Field f : right) {
            result.setField(i, f);
            i++;
        }
        
        return result;
    }
    
    private interface JoinImplementation {
        public void open() throws DbException, TransactionAbortedException;
        public Tuple fetchNext() throws TransactionAbortedException, DbException;
        public void close();
        public void rewind() throws DbException, TransactionAbortedException;
    }

    private class HashJoin implements JoinImplementation {

        private Map<Integer, List<Tuple>> buckets;
        private DbIterator currBucket;
        private Tuple currInner;
        
        public HashJoin() {
            buckets = new HashMap<Integer, List<Tuple>>();
        }
        
        @Override
        public void open() throws DbException, TransactionAbortedException {
            
            if (buckets.size() == 0) {
                // Read the tuples from the outer into memory
                int lIndex = _predicate.getField1();
                while (_lChild.hasNext()) {
                    Tuple lTuple = _lChild.next();
                    int hash = lTuple.getField(lIndex).hashCode();
                    
                    List<Tuple> bucket = buckets.get(hash);
                    if (bucket == null) {
                        bucket = new ArrayList<Tuple>();
                        buckets.put(hash, bucket);
                    }
                    bucket.add(lTuple);
                }
            }
            
            // Get the first (tuple, bucket) pair that might produce matches.
            while (_rChild.hasNext()) {
                currInner = _rChild.next();
                currBucket = getMatchingBucket(currInner);
                if (currBucket != null) {
                    break;
                }
            }
        }
        
        private TupleIterator getMatchingBucket(Tuple inner) {
            int hash = inner.getField(_predicate.getField2()).hashCode();
            List<Tuple> bucket = buckets.get(hash);
            if (bucket == null) {
                return null;
            }
            TupleIterator iter = new TupleIterator(bucket.get(0).getTupleDesc(), bucket);
            iter.open();
            return iter;
        }

        @Override
        public Tuple fetchNext() throws TransactionAbortedException, DbException {
            // If currBucket is null, then the join is exhausted
            if (currBucket == null) {
                return null;
            }
            
            // Continue joining with tuples in the current bucket
            Tuple lTuple = fetchNextMatchFrom(currBucket, currInner);
            if (lTuple != null) {
                return join(lTuple, currInner);
            }
            
            // The current bucket is exhausted
            while (_rChild.hasNext()) {
                currInner = _rChild.next();
                
                // Get a bucket that might contain some matches
                currBucket = getMatchingBucket(currInner);
                if (currBucket == null) {
                    // No matching bucket
                    continue;
                }
                
                // Search the bucket for matches
                lTuple = fetchNextMatchFrom(currBucket, currInner);
                if (lTuple == null) {
                    // No matching tuples
                    continue;
                }
                
                return join(lTuple, currInner);
            }
            
            // The only way to end up out here is if the inner relation is 
            // exhausted--in that case, we're done joining.
            currBucket = null;
            return null;
        }
        
        private Tuple fetchNextMatchFrom(DbIterator outerSource, Tuple innerTuple) throws TransactionAbortedException, DbException {
         while (outerSource.hasNext()) {
                Tuple outerTuple = outerSource.next();
                if (_predicate.filter(outerTuple, innerTuple)) {
                    return outerTuple;
                }
            }
         return null;
       }

        @Override
        public void close() {
            buckets.clear();
            currBucket = null;
            currInner = null;
        }

        @Override
        public void rewind() throws DbException, TransactionAbortedException {
            open();
        }
    }
    
    private class NestedLoopJoin implements JoinImplementation {

        private Tuple _lTuple;
        
        public void open() throws DbException, TransactionAbortedException {
            _lChild.rewind();
            _rChild.rewind();
            _lTuple = _lChild.next();
        }
        
        public Tuple fetchNext() throws TransactionAbortedException, DbException {
            throwIfClosed();
            
            // If you are here, the _lTuple is non-null. However, _lChild may be
            // exhausted.
            
            do {
                // Get the next matching tuple from the right child.
                Tuple rTuple = fetchNextMatchFrom(_lTuple, _rChild);
                if (rTuple != null) {
                    return join(_lTuple, rTuple);
                }
                _rChild.rewind();
                
                // Get the next left tuple from the left child if possible.
                if (!_lChild.hasNext()) {
                    break;
                }
                _lTuple = _lChild.next();
            } while (true);
            
            // The only way to get here is if _lChild.hasNext == false.
            return null;
        }
        
        private Tuple fetchNextMatchFrom(Tuple outerTuple, DbIterator innerSource) throws TransactionAbortedException, DbException {
             while (innerSource.hasNext()) {
                Tuple innerTuple = innerSource.next();
                if (_predicate.filter(outerTuple, innerTuple)) {
                    return innerTuple;
                }
             }
             return null;
        }

        @Override
        public void close() {
            _lTuple = null;
        }

        @Override
        public void rewind() throws DbException, TransactionAbortedException {
            open();
        }
    }
}
